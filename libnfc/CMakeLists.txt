IF(WIN32)
  # Windows workarounds
  SET(WINDOWS_SOURCES ../contrib/win32/stdlib.c)
  # def and rc files for Windows
  SET(RC_COMMENT "${PACKAGE_NAME} library")
  SET(RC_INTERNAL_NAME ${PACKAGE_NAME})
  SET(RC_ORIGINAL_NAME ${PACKAGE_NAME}.dll)
  SET(RC_FILE_TYPE VFT_DLL)
  SET(RC_FILE_FLAGS 0x0)
  IF(LIBNFC_DEBUG_MODE)
    SET(RC_FILE_FLAGS VS_FF_DEBUG)
  ENDIF(LIBNFC_DEBUG_MODE)
  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/../contrib/win32/version.rc.in ${CMAKE_CURRENT_BINARY_DIR}/libnfc.rc)
  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/../contrib/win32/libnfc.def.in ${CMAKE_CURRENT_BINARY_DIR}/libnfc.def)
  LIST(APPEND WINDOWS_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/libnfc.rc)
  LIST(APPEND WINDOWS_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/libnfc.def)
ENDIF(WIN32)

# Library's chips
SET(CHIPS_SOURCES chips/pn53x.c)
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/chips)

# Library's buses
IF(USB_REQUIRED)
  LIST(APPEND BUSES_SOURCES buses/usbbus.c)
ENDIF(USB_REQUIRED)

IF(UART_REQUIRED)
  IF(WIN32)
    # Windows have a special implementation for UART
    LIST(APPEND BUSES_SOURCES ../contrib/win32/libnfc/buses/uart.c)
  ELSE(WIN32)
    LIST(APPEND BUSES_SOURCES buses/uart.c)
  ENDIF(WIN32)
ENDIF(UART_REQUIRED)

IF(I2C_REQUIRED)
  IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    LIST(APPEND BUSES_SOURCES buses/i2c.c)
  ELSE(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    # Only Linux is supported at the moment
    #LIST(APPEND BUSES_SOURCES ../contrib/win32/libnfc/buses/i2c.c)
    MESSAGE( FATAL_ERROR "I2C is only (yet) supported in Linux!" )
  ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
ENDIF(I2C_REQUIRED)

IF(SPI_REQUIRED)
  IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    LIST(APPEND BUSES_SOURCES buses/spi.c)
  ELSE(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    # Only Linux is supported at the moment
    #LIST(APPEND BUSES_SOURCES ../contrib/win32/libnfc/buses/spi.c)
    MESSAGE( FATAL_ERROR "SPI is only (yet) supported in Linux!" )
  ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
ENDIF(SPI_REQUIRED)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/buses)

IF(PCSC_FOUND)
  INCLUDE_DIRECTORIES(${PCSC_INCLUDE_DIRS})
  LINK_DIRECTORIES(${PCSC_LIBRARY_DIRS})
ENDIF(PCSC_FOUND)

IF(LIBUSB_FOUND)
  INCLUDE_DIRECTORIES(${LIBUSB_INCLUDE_DIRS})
  LINK_DIRECTORIES(${LIBUSB_LIBRARY_DIRS})
ENDIF(LIBUSB_FOUND)

# Library
SET(LIBRARY_SOURCES nfc.c nfc-device.c nfc-emulation.c nfc-internal.c conf.c iso14443-subr.c mirror-subr.c target-subr.c ${DRIVERS_SOURCES} ${BUSES_SOURCES} ${CHIPS_SOURCES} ${WINDOWS_SOURCES})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

IF(LIBNFC_LOG)
  IF(WIN32)
    LIST(APPEND LIBRARY_SOURCES log.c ../contrib/win32/libnfc/log-internal.c)
  ELSE(WIN32)
    LIST(APPEND LIBRARY_SOURCES log.c log-internal.c)
  ENDIF(WIN32)
ENDIF(LIBNFC_LOG)
ADD_LIBRARY(nfc SHARED ${LIBRARY_SOURCES})

IF(PCSC_FOUND)
  TARGET_LINK_LIBRARIES(nfc ${PCSC_LIBRARIES})
ENDIF(PCSC_FOUND)

IF(LIBUSB_FOUND)
  TARGET_LINK_LIBRARIES(nfc ${LIBUSB_LIBRARIES})
ENDIF(LIBUSB_FOUND)

IF(LIBRT_FOUND)
  TARGET_LINK_LIBRARIES(nfc ${LIBRT_LIBRARIES})
ENDIF(LIBRT_FOUND)

SET_TARGET_PROPERTIES(nfc PROPERTIES SOVERSION 6 VERSION 6.0.0)

IF(WIN32)
  # Libraries that are windows specific
  TARGET_LINK_LIBRARIES(nfc wsock32)
  # Ensure consistent lib prefix
  SET_TARGET_PROPERTIES(nfc PROPERTIES PREFIX lib)
ENDIF(WIN32)

INSTALL(TARGETS nfc LIBRARY COMPONENT libraries)
